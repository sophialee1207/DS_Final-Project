/**
 * Event retry settings
 *
 * The parameters represent an exponential backoff formula:
 * min(maxDelay, max(minDelay, backoff^attempts * delay))
 */
export declare type EventRetryOptions = {
    /**
     * How often we retry each event
     *
     * Defaults to 4
     */
    attempts: number;
    /**
     * The backoff factor for each attempt
     *
     * Defaults to 2
     */
    backoff: number;
    /**
     * The delay factor for each attempt
     *
     * Defaults to 100
     */
    delay: number;
    /**
     * The global minimum delay
     */
    minDelay: number;
    /**
     * The global maximum delay
     */
    maxDelay: number;
    /**
     * Called with each error
     *
     * Can be used for logging, or if the error is non-retryable, this callback can `throw` the error to short circuit the callback.
     */
    onError: (err: Error) => void;
};
/**
 * Provides retry logic for a promise, with failure cases
 */
export declare class EventRetrier {
    private options;
    private cancelWait;
    constructor(opts?: Partial<EventRetryOptions>);
    /**
     * Causes ongoing retry handlers to cancel their timeout and immediately retry
     * @returns a Promise which completes after all handlers have retried once.
     */
    shortCircuit(): Promise<void>;
    /**
     * Exits all ongoing retry handlers with an error
     *
     * @returns A promise which completes once all retry handlers have exited.
     */
    shutdown(): Promise<void>;
    /**
     * Retry the promise
     *
     * Attempts the promise in an infinite loop, and retries according to the logic in EventRetryOptions
     * @param makePromise An async function to retry
     * @returns A Promise which succeeds if the async function succeeds, or has exhausted retry attempts
     */
    retryPromise<T>(makePromise: () => Promise<T>): Promise<T>;
}
