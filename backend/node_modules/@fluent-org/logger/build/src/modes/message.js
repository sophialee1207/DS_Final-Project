"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageQueue = void 0;
const queue_1 = require("./queue");
const protocol = require("../protocol");
const util_1 = require("../util");
/**
 * Implements the Forward specification's [Message mode](https://github.com/fluent/fluentd/wiki/Forward-Protocol-Specification-v1#message-modes)
 */
class MessageQueue extends queue_1.Queue {
    constructor() {
        super(...arguments);
        /**
         * Maintain the queue as a Set
         *
         * JS guarantees sets are insertion ordered, so calling sendQueue.values().next.value will be the first entry to be inserted.
         */
        this.sendQueue = new Set();
    }
    /**
     * Size is not measured for this queue
     */
    get queueSize() {
        return -1;
    }
    /**
     * The length of the queue
     */
    get queueLength() {
        return this.sendQueue.size;
    }
    push(tag, time, event) {
        const deferred = util_1.pDefer();
        this.sendQueue.add({
            tag,
            time,
            event,
            deferred,
        });
        return deferred.promise;
    }
    pop() {
        if (this.sendQueue.size === 0) {
            return null;
        }
        const entryData = this.sendQueue.values().next().value;
        this.sendQueue.delete(entryData);
        return entryData;
    }
    nextPacket(chunk) {
        const entryData = this.pop();
        if (entryData === null) {
            return null;
        }
        const packet = protocol.generateMessageMode(entryData.tag, entryData.time, entryData.event, chunk);
        return {
            packet: protocol.encodeMessage(packet),
            deferred: entryData.deferred,
        };
    }
}
exports.MessageQueue = MessageQueue;
//# sourceMappingURL=message.js.map