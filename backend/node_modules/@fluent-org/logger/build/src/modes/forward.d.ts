import { Queue, PacketData } from "./queue";
import * as protocol from "../protocol";
import { DeferredPromise } from "../util";
declare type ForwardRecord = {
    tag: protocol.Tag;
    entries: protocol.Entry[];
    deferred: DeferredPromise<void>;
};
/**
 * Implements the Forward specification's [Forward mode](https://github.com/fluent/fluentd/wiki/Forward-Protocol-Specification-v1#forward-mode)
 */
export declare class ForwardQueue extends Queue {
    /**
     * Maintain the queue as a Map
     *
     * JS guarantees maps are insertion ordered, so calling sendQueue.values().next.value will be the first tag to be inserted.
     */
    private sendQueue;
    /**
     * The total number of events stored within the queue
     *
     * Note that this isn't just sendQueue.size because each entry in the map can have multiple events
     */
    private sendQueueLength;
    /**
     * Size is not measured for this queue
     */
    get queueSize(): number;
    get queueLength(): number;
    push(tag: protocol.Tag, time: protocol.Time, data: protocol.EventRecord): Promise<void>;
    pop(): ForwardRecord | null;
    nextPacket(chunk?: protocol.Chunk): PacketData | null;
}
export {};
